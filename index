#!/usr/bin/env node

'use strict';

var tick = 0;

var chunk = require('./chunk');
var ifstat = require('./ifstat');
var blessed = require('blessed');
var contrib = require('blessed-contrib');
var screen = blessed.screen();

var line = contrib.line({
  xLabelPadding: 3,
  xPadding: 3,
  showLegend: true,
  wholeNumbersOnly: false,
  label: 'Bandwidth',
  style: {
    line: 'yellow',
    text: 'green',
    baseline: 'black'
  }
});

screen.append(line);

screen.key([
  'escape', 'q', 'C-c'
], function(ch, key) {
  return process.exit(0);
});

require('./interfaces')(function(err, ifaces) {
  if (err) return console.log('exiting with error:', err);
  ifstat(ifaces.list, function(data) {
    var usage = chunk.call(
      data.toString().trim().split(
        /\s/g
      ).filter(function(line) {
        return line !== '';
      }),
      2
    );

    for (var i = 0, len = ifaces.list.length; i < len; i++) {
      if (tick >= 10) {
        ifaces.rx[i].x.shift();
        ifaces.rx[i].y.shift();
        ifaces.tx[i].x.shift();
        ifaces.tx[i].y.shift();
      }
      ifaces.rx[i].x.push('t' + tick);
      ifaces.rx[i].y.push(usage[i][0]);
      ifaces.tx[i].x.push('t' + tick);
      ifaces.tx[i].y.push(usage[i][1]);
    }

    line.setData(ifaces.rx.concat(ifaces.tx));
    screen.render();

    ++tick;
  });

  screen.render();
});
